<style>
/*#zolagocatalog_mass_grid .hor-scroll{*/
    /*overflow: hidden !important;*/
/*}*/
/*#scrollbar-container-x{*/
    /*width:100%;*/
    /*height:15px;*/
    /*bottom:0;*/
    /*left:0;*/
/*}*/
/*#scrollbar-container-y{*/
    /*width:15px;*/
    /*height:100%;*/
    /*top:0;*/
    /*right:0;*/
/*}*/
/*#scrollbar-container-x, #scrollbar-container-y{*/
    /*background:#CCC;*/
    /*position: absolute;*/
    /*opacity:0.4;*/
    /*display:none;*/
/*}*/
/*#zolagocatalog_mass_grid .grid:hover #scrollbar-container-x,*/
/*#zolagocatalog_mass_grid .grid:hover #scrollbar-container-y{*/
    /*display:block;*/
/*}*/
/*#scrollbar-container-x:hover, #scrollbar-container-y:hover,*/
/*#scrollbar-container-x.dragging, #scrollbar-container-y.dragging{*/
    /*opacity:0.8;*/
/*}*/
/*#scroll-handle-x{*/
    /*width:50px;*/
    /*height:100%;*/
    /*top:0;*/
    /*left:0;*/
/*}*/
/*#scroll-handle-y{*/
    /*width:100%;*/
    /*height:50px;*/
    /*top:0;*/
    /*left:0;*/
/*}*/
/*#scroll-handle-x, #scroll-handle-y{*/
    /*background:#999;*/
    /*border-radius:50px;*/
    /*position:absolute;*/
    /*cursor: pointer;*/
/*}*/
/*#scroll-handle-x:hover, #scroll-handle-y:hover,*/
/*#scrollbar-container-x.dragging #scroll-handle-x, #scrollbar-container-y.dragging #scroll-handle-y{*/
    /*background:#666;*/
/*}*/
#scrollbar-container-x{
    width:100%;
    height:10px;
    bottom:-11px;
    left:0;
}
#scrollbar-container-y{
    width:10px;
    height:100%;
    top:0;
    right:-11px;
}
#scrollbar-container-x, #scrollbar-container-y{
    background:#CCC;
    position: absolute;
    opacity:0.4;
    /*display:none;*/
}
#scrollbar-container-x:hover, #scrollbar-container-y:hover,
#scrollbar-container-x.dragging, #scrollbar-container-y.dragging{
    opacity:0.8;
}
#scroll-handle-x{
    width:50px;
    height:100%;
    top:0;
    left:0;
}
#scroll-handle-y{
    width:100%;
    height:50px;
    top:0;
    left:0;
}
#scroll-handle-x, #scroll-handle-y{
    background:#999;
    border-radius:50px;
    position:absolute;
    cursor: pointer;
}
#scroll-handle-x:hover, #scroll-handle-y:hover,
#scrollbar-container-x.dragging #scroll-handle-x, #scrollbar-container-y.dragging #scroll-handle-y{
    background:#666;
}
.popover-content{
    padding:20px 0 0 0;
}
#attr-filters{
    /*display:none;*/
}
#attribute_set_switcher{
    background: #666;
    color: white;
}
#mass-table{
    margin-top:10px;
}
table.table{
    margin:0 !important;
    padding:0 !important;
}
</style>
<div id="mass-table" class="container">

    <div id="attr-filters" class="row" <?php if(($this->getStaticFilters($this->getCurrentAttributeSetId()) && $this->getCurrentAttributeSetId())) echo 'style="display:none;"'; ?>>
       <div class="col-md-12">
           <div class="widget box">
               <div class="widget-header">
                   <?php if($this->getCurrentAttributeSetId()): ?>
                       <!--Filters-->
                       <h4><i class="icon-filter"></i><?php echo Mage::helper("zolagocatalog")->__("Filters");?></h4>
                   <?php else: ?>
                       <h4><i class="icon-filter"></i><?php echo Mage::helper("zolagocatalog")->__("Browsing Category");?></h4>
                   <?php endif; ?>

               </div>
               <div class="widget-content fiters">
                   <form class="form-horizontal">

                       <?php if($this->getCurrentAttributeSetId()): ?>

                           <div class="form-group">
                               <div class="col-md-4">
                                   <?php echo $this->getChildHtml("other_filter"); ?>
                               </div>
                               <div class="col-md-8">
                                   <div class="row">
                                       <?php echo $this->getChildHtml("additional_filter"); ?>
                                   </div>
                               </div>
                           </div>
                           <?php echo $this->getChildHtml("static_filter"); ?>

                       <?php else: ?>

                           <div class="form-group">
                               <div class="col-md-12">
                                   <div class="attribute-switcher row next-row">
                                       <?php echo $this->getChildHtml("attribute_set_switcher"); ?>
                                   </div>
                               </div>
                           </div>

                       <?php endif; ?>

                   </form>
               </div>
           </div>
       </div>
    </div>
</div>

<?php echo $this->getMessagesBlock()->getGroupedHtml(); ?>

<script type="text/javascript">
    FORM_KEY = "<?php echo Mage::getSingleton('core/session')->getFormKey() ?>";
</script>
<script type="text/javascript">
    var gridObj;
    var massActionLocation = '<?php echo Mage::getUrl('*/*/massStatus'); ?>';
    var cleanLocation = '<?php echo Mage::getBlockSingleton('zolagocatalog/vendor_mass_staticfilter')->getChangeUrl(); ?>';
    var limit = 50;
</script>

<?php if($this->getCurrentAttributeSetId()): ?>
    <script type="text/javascript">
        var currentAttributeSetId = <?php echo $this->getCurrentAttributeSetId(); ?>;
    </script>
    <div class="container z-grid">
        <div class="widget box">
            <div class="widget-content">
                <?php echo $this->getGridHtml(); ?>
            </div>
        </div>
    </div>

    <?php echo $this->getChildHtml("editor"); ?>

    <script type="text/javascript">

    jQuery(function($){

            var filterAjaxFired = false,
                $scrollHandleX = $('#scroll-handle-x'),
                $scrollHandleY = $('#scroll-handle-y'),
                scrollXFactor,
                scrollYFactor,
                interval,
                page = 1,
                prevRequestCompleted = true,
                allRowsSelected = false,
                tablePageHeight;

            $( ".datepicker" ).datepicker();

            $('#myModal').modal();

            // Turn off main scrollbars
            $("body").css("overflow", "hidden")
                     .css('height', 'auto');

            interval = setInterval(loadMoreRows, 2000);

            //Resize columns
            calculateLeftColumnWidth();

            calculateTableWidth();

            calculateViewportHeight();

            calculateScrollBars();

            calculateTotalLoaded();

            calculateTablePageHeight();

            $('body').on('click', '.toggle-sidebar', function(){
                calculateScrollBars();
            });

            $scrollHandleX.draggable({
                axis: "x",
                containment: "parent",
                start: function(){
                    $(this).parent().addClass('dragging');
                },
                drag: function(){
                    var posLeft = $(this).position().left;
                    $('#grid-body').scrollLeft(posLeft * scrollXFactor);

                },
                stop: function(){
                    $(this).parent().removeClass('dragging');
                }
            });

            $scrollHandleY.draggable({
                axis: "y",
                containment: "parent",
                start: function(){
                    $(this).parent().addClass('dragging');
                },
                drag: function(){
                    var posTop = $(this).position().top;
                    $('#mass-grid .tbody').scrollTop(posTop * scrollYFactor);
                },
                stop: function(){
                    $(this).parent().removeClass('dragging');
                }
            });

            // Mousewheel
            $('#mass-grid').on('mousewheel', function(event) {

                var speed = $("#scroll-handle-y").height() / 5,
                    direction = (event.deltaY > 0) ? 'up' : 'down';

                // When editor popover opened block mouse scrolling
                if($("#editor-popover").css("visibility") == 'visible'){
                    return false;
                }

                if($("#image-modal").is(":visible")){
                    return false;
                }

                scrollTableY(speed, scrollYFactor, direction);

            });

            // Key press
            $(document).keydown(function(e){

                var speed = $("#scroll-handle-y").height() / 5,
                    editorVisible = ($("#editor-popover").css("visibility") == 'visible') ? true : false;

                // Move up
                if (e.keyCode == 38 && !editorVisible) {

                    scrollTableY(speed, scrollYFactor, 'up');

                    return false;
                }
                // Move down
                else if(e.keyCode == 40 && !editorVisible){

                    scrollTableY(speed, scrollYFactor, 'down');

                    return false;
                }

            });

            // Selectors
            $("#zolagocatalog_mass_grid_massaction a.select-all-btn").on('click', function(){

                allRowsSelected = true;

                $('.grid .table .massaction-checkbox').prop('checked',true);

                $('.grid .table .massaction-checkbox').parent().addClass('checked');

                $('#grid-left-columns .table .tbody > div').addClass('selected');
                $('#grid-body .table .tbody > div').addClass('selected');

                calculateTotalSelected();
            });

            $("#zolagocatalog_mass_grid_massaction a.unselect-all-btn").on('click', function(){

                allRowsSelected = false;

                $('.grid .table .massaction-checkbox').prop('checked',false);

                $('.grid .table .massaction-checkbox').parent().removeClass('checked');

                $('#grid-left-columns .table .tbody > div').removeClass('selected');
                $('#grid-body .table .tbody > div').removeClass('selected');

                calculateTotalSelected();
            });

            $('body').on('click', '.grid .table .massaction-checkbox', function(){

                var $checkbox = $(this),
                    rowIndex = $checkbox.closest('.cell').parent().index();

                $('#grid-left-columns .table .tbody > div:eq(' + rowIndex + ')').toggleClass('selected');
                $('#grid-body .table .tbody > div:eq(' + rowIndex + ')').toggleClass('selected');

                allRowsSelected = false;
            });

            // Tooltip
            $('body').on('mouseover', '.table .cell', function(){

                var $cellContainer = $(this),
                    $cell = $cellContainer.find("> div"),
                    cellContainerH = $cellContainer.outerHeight(),
                    cellH,
                    text;

                if(!$cell.length){
                    return;
                }

                cellH = $cell[0].scrollHeight,
                text = $cell.text();

                if(cellH > cellContainerH){
                    $cellContainer.attr('data-title', text);
                    $cellContainer.tooltip('show');
                }
            });

            // Popover
            var $popover = $("#filter-btn").popover({
                content: function() { return $("#attr-filters").html() },
                html: true,
                container: "#content",
                placement: "left"
            });

            setPopoverWidth($popover);

            $('body').on('click', '.popover .form-actions .cancel-btn', function(){
                $("#filter-btn").popover('hide');
            });

            $('body').on('click', '.popover .form-actions .search-btn', function(){

                applyFilters();

                return false;

            });

            $("body").on('click', '#reset-filter-btn', function(){

                reloadWithAttributeSet();

                return false;
            });

            $("body").on('change', '#attribute_set_switcher', function(){

                reloadWithAttributeSet($(this).val());

            });

//            $("body").on('change', '.popover .staticFilter', function(){
//
//                var id = $(this).attr('id'),
//                    index = $(this).find('option:selected').index();
//
//                $("#attr-filters #" + id + " option[selected='selected']").removeAttr('selected');
//                $("#attr-filters #" + id + " option:eq(" + index + ")").attr('selected', 'selected');
//            });

            // Inline Editor
            var $activeCell;

            $("body").on('click', "#grid-body .cell", function(){

                var $cell = $(this),
                    index = $cell.index(),
                    attributeName = $("#grid-body .headings > div:eq(" + index + ") a").attr('name'),
                    attributeTitle = $("#grid-body .headings > div:eq(" + index + ") a span").html(),
                    $formField = $("#grid-editor *[name='attributes[" + attributeName + "]']"),
                    $wrapper = $formField.closest('.element-wrapper'),
                    positionLeft = $cell.position().left,
                    positionTop = $cell.position().top,
                    cellOffsetTop = $cell.offset().top,
                    cellOffsetLeft = $cell.offset().left,
                    gridBodyOffsetTop = $("#grid-body .tbody").offset().top,
                    gridBodyOffsetLeft = $("#grid-body").offset().left,
                    gridBodyW = $("#grid-body").width(),
                    gridBodyH = $("#grid-body .tbody").height(),
                    gridBodyMiddleX = gridBodyOffsetLeft + (gridBodyW / 2),
                    gridBodyMiddleY = gridBodyOffsetTop + (gridBodyH / 2),
                    cellW = $cell.outerWidth(),
                    cellH = $cell.outerHeight(),
                    anySelected = ($('.grid .table .massaction-checkbox:checked').length) ? true : false,
                    popoverH,
                    popoverW;

                $activeCell = $cell;

                $("#grid-body .cell").removeClass('active');

                if(!anySelected){
                    $cell.addClass('active');
                }

                hideEditorPopover();

                // Set content
                $("#editor-popover h4").html(attributeTitle);
                $("#editor-popover .content").html($wrapper.html());

                if(!anySelected){
                    $("#editor-popover .content .apply-all-selected").hide();
                }

                // Position popover
                popoverH = $("#editor-popover").outerHeight();
                popoverW = $("#editor-popover").outerWidth();

                // Top
                if(cellOffsetTop < gridBodyMiddleY){
                    $("#editor-popover").css('top', positionTop + "px");
                }
                // Bottom
                else{
                    $("#editor-popover").css('top', (positionTop - popoverH + cellH) + "px");
                }

                // Right
                if(cellOffsetLeft < gridBodyMiddleX){
                    $("#editor-popover").css('left', (positionLeft + cellW) + "px");
                }
                // Left
                else{
                    $("#editor-popover").css('left', (positionLeft - popoverW) + "px");
                }

                showEditorPopover();

            });

            $("body").on('click', '#editor-popover #mass-grid-submit', function(){

                var $checkedCheckboxes = $('.grid .table .massaction-checkbox:checked'),
                    anySelected = ($checkedCheckboxes.length) ? true : false,
                    $form = $("#editor-popover form"),
                    $applyAllSelectedCheckbox = $form.find('[name="apply_all_selected"]'),
                    url = saveGridLocation,
                    $attributesMode = $form.find('[name^="attributes_mode"]:checked'),
                    mode = ($attributesMode.length) ? $attributesMode.val() : 'set',
                    checkedIds = [],
                    currentValue,
                    value,
                    params,
                    rowIndex,
                    colIndex = $activeCell.index(),
                    clickedId,
                    multiValues = [];

                // Get selected value
                if($form.find('option:selected').length == 1){
                    value = $form.find('option:selected').text()
                }
                else if($form.find('option:selected').length > 1){

                    $form.find('option:selected').each(function(){
                       multiValues.push($(this).text());
                    });
                    value = multiValues.join(", ");
                }
                else if($form.find('input[type="text"]').length){
                    value = $form.find('input[type="text"]').val();
                }
                else if($form.find('textarea').length){
                    value = $form.find('textarea').val();
                }
                else{
                    alert("Option cannot be blank");
                    return false;
                }

                if(anySelected && $applyAllSelectedCheckbox.length && $applyAllSelectedCheckbox.is(":checked")){

                    if(allRowsSelected){
                        checkedIds = gridIds;
                    }
                    else{

                        $checkedCheckboxes.each(function(){
                            checkedIds.push($(this).val());
                        })
                    }

                }
                else{

                    rowIndex = $activeCell.parent().index();

                    $checkedCheckboxes = $('#grid-left-columns .table .tbody > div:eq(' + rowIndex + ') .massaction-checkbox');
                    clickedId = $checkedCheckboxes.val();

                    checkedIds.push(clickedId);
                }

                params = $form.serialize();

                params += "&product_ids=" + checkedIds.join(",");
                params += "&attribute_set=" + currentAttributeSetId;

                hideEditorPopover();

                showLoader();

                $.post( url, params, function( data ) {

                    var status = data.status,
                        valueA,
                        $cell,
                        $row,
                        i;

                    $checkedCheckboxes.each(function(){
                        $row = $(this).closest(".cell").parent();
                        i = $row.index();

                        $cell = $("#grid-body .tbody > div:eq(" + i + ") .cell:eq(" + colIndex + ") div");

                        currentValue = $cell.text().trim();

                        if(mode == 'add'){
                            valueA = currentValue.split(",");
                            valueA.push(value);
                            value = valueA.join(", ");
                        }
                        else if(mode == 'sub'){
                            valueA = currentValue.split(",");
                            valueA = removeValueFromArray(valueA, value);
                            value = valueA.join(", ");
                        }

                        $cell.html(value);
                    });

                    hideEditorPopover();

                    $("#grid-body .cell").removeClass('active');

                    hideLoader();

                }, "json");

                return false;
            });

            $("body").on('click', '#editor-popover .close-btn', function(){

                hideEditorPopover();

                $("#grid-body .cell").removeClass('active');

                return false;

            });

            // Mass actions
            $('body').on('click', '#mass-submit-btn', function(){

                var $checkedCheckboxes = $('.grid .table .massaction-checkbox:checked'),
                    anySelected = ($checkedCheckboxes.length) ? true : false,
                    optionSelected = $("#zolagocatalog_mass_grid_massaction-select").val(),
                    url = massActionLocation,
                    checkedIds = [],
                    params = '';

                if(anySelected){

                    if(allRowsSelected){
                        checkedIds = gridIds;
                    }
                    else{

                        $checkedCheckboxes.each(function(){
                            checkedIds.push($(this).val());
                        })
                    }

                    params += "product_ids=" + checkedIds.join(",");

                    url += "attribute_set/" + currentAttributeSetId + "/";

                    if(optionSelected == 'status'){
                        url += "status/2/";
                    }
                    else if(optionSelected == 'review'){
                        url += "review/1/";
                    }
                    else{
                        alert("Please select an option to apply for selected products");
                        return false;
                    }

                    showLoader();

                    $.post( url, params, function( data ) {

                        alert(data.content);

                        hideLoader();

                    }, "json");
                }
                else{
                    alert("Please select at least one row");
                }

                return false;
            });

            // Table filters
            var orgTextFieldValue;
            var $filterInputs = $('.table .thead input, .table .thead input');
            var $filterSelects = $('.table .thead select, .table .thead select');
            $filterInputs.each(function(){
                $(this).on('focus', function(){
                    $(this).data('org-value', $(this).val());
                });

            });

            $filterInputs.each(function(){

                $(this).on('blur', function(){

                    if($(this).data('org-value') != $(this).val()){
                        applyFilters();
                    }

                });
            });

            $filterInputs.each(function(){

                $(this).on('keypress', function(e){
                    var code = e.keyCode || e.which;
                    if(code == 13){
                        applyFilters();
                    }
                });
            });

            $filterSelects.each(function(){

                $(this).on('change', function(){

                    applyFilters();

                });
            });

            // Page up/Page down buttons
            $(document).keydown(function(e) {
                var code = (e.keyCode ? e.keyCode : e.which),
                    scala = $('#mass-grid .tbody')[0].scrollHeight / $("#scrollbar-container-y").outerHeight(),
                    speed = tablePageHeight / scala;

                if (code == 34) {
                    scrollTableY(speed, scrollYFactor, 'down');
                } else if (code == 33) {
                    scrollTableY(speed, scrollYFactor, 'up');
                }

                return false;
            });

            // Page up/Page down clicks
            $("#container").on('click', "#scrollbar-container-y", function(e){

                var handleTop = $("#scroll-handle-y").offset().top,
                    direction = (handleTop > e.clientY) ? 'up' : 'down',
                    scala = $('#mass-grid .tbody')[0].scrollHeight / $("#scrollbar-container-y").outerHeight(),
                    speed = tablePageHeight / scala;

                scrollTableY(speed, scrollYFactor, direction);

                return false;
            });

            $('.grid .table .headings a').on('click', function(){

                applySort($(this));

                return false;
            });

            // Thumbnails
            $('body').on('click', '.cell.thumb a', function(){

                var $link = $(this),
                    $cell = $link.closest(".cell"),
                    $row = $cell.parent(),
                    rowIndex = $row.index(),
                    imageUrl = $link.attr('href'),
                    $titleElem = $(".table .tbody > div:eq(" + rowIndex + ") .cell.product-name > div"),
                    title = ($titleElem.length) ? $titleElem.text() : "Image",
                    $modal = $("#image-modal"),
                    screenW = $(window).height(),
                    modalPadding = 250;

                $modal.find('.modal-title').text(title);
                $modal.find('.modal-body img').attr('src', imageUrl)
                                              .css('height', (screenW - modalPadding) + "px");

                $("#image-modal").modal('show');

                return false;
            });

            // Window resize
            $(window).on('resize', $.throttle( 250, function(){

                calculateViewportHeight();

                calculateScrollBars();
            } ));

            // Window resize end
            $(window).resize( $.debounce( 250, function(){
                setPopoverWidth($popover);

                calculateTablePageHeight();
            }) );

            function getAbsHeight($elem) {
                var windowH = $(window).height(),
                    heightBottomPadding = 30;

                return windowH - $elem.offset().top - heightBottomPadding;
            }

            function scrollTableY(speed, scrollYFactor, direction){

                var $scrollHandleY = $('#mass-grid').find('#scroll-handle-y');
                var $scrollbarContainerY = $scrollHandleY.parent();

                if(!$scrollbarContainerY.length){
                    return false;
                }

                var currHandleTop = $scrollHandleY.position().top;
                var newHandleTop = currHandleTop + speed;

                if (direction == 'down') {
                    newHandleTop = currHandleTop + speed;
                } else {
                    newHandleTop = currHandleTop - speed;
                }

                if(newHandleTop < 0 && direction == 'up'){
                    $scrollHandleY.css('top', 0 + 'px');
                    $('#mass-grid .tbody').scrollTop(0);
                    return false;
                }
                else if(newHandleTop >= ($scrollbarContainerY.height() - $scrollHandleY.height()) && direction == 'down'){
                    $scrollHandleY.css('top', ($scrollbarContainerY.height() - $scrollHandleY.height()) + 'px');
                    $('#mass-grid .tbody').scrollTop($('#mass-grid .tbody')[0].scrollHeight);
                    return false;
                }

                $scrollHandleY.css('top', (newHandleTop) + 'px');
                $('#mass-grid .tbody').scrollTop((newHandleTop * scrollYFactor));

                return newHandleTop;
            }

            function removeValueFromArray(arr) {
                var what, a = arguments, L = a.length, ax;
                while (L > 1 && arr.length) {
                    what = a[--L];
                    while ((ax= arr.indexOf(what)) !== -1) {
                        arr.splice(ax, 1);
                    }
                }
                return arr;
            }

            function showEditorPopover(){

                $("#editor-popover").css('visibility', 'visible');
            }

            function hideEditorPopover(){

                $("#editor-popover").css('visibility', 'hidden');
            }

            function showLoader(){
                $("#grid-loader").show();
            }

            function hideLoader(){
                $("#grid-loader").hide();
            }

            function applyFilters(){

                var url = getUrl(),
                    $leftColumns,
                    $bodyColumns;

                filterAjaxFired = true;

                clearInterval(interval);

                $("#filter-btn").popover('hide');

                showLoader();

                $.get( url + "?uselazyload=true", function( data ) {

                    $leftColumns = $(data).find('#grid-left-columns .tbody');
                    $bodyColumns = $(data).find('#grid-body .tbody');

                    history.pushState({}, "next page", url);

                    $("#mass-grid #grid-left-columns .tbody").replaceWith($leftColumns);
                    $("#mass-grid #grid-body .tbody").replaceWith($bodyColumns);

                    //Recalculate total loaded
                    totalRecords = $(data).find('#total-records').val();
                    $('.total-records-count').text(totalRecords);

                    calculateViewportHeight();

                    calculateTotalLoaded();

                    //Recalculate selected
                    calculateTotalSelected();

                    //Resize scrollers
                    calculateScrollBars();

                    //Apply uniform
                    $("input[type='checkbox']").uniform();

                    hideLoader();

                    filterAjaxFired = false;

                    prevRequestCompleted = true;

                    interval = setInterval(loadMoreRows, 2000);
                });
            }

            function applySort($link){

                var name = $link.attr('name'),
                    title = $link.attr('title'),
                    url = getUrl();

                if(name && title){

                    url += varNameSort + "/" + name + "/" + varNameDir + "/" + title + "/";

                    showLoader();

                    window.location.href = url;
                }
            }

            function getUrl(params){

                var location = cleanLocation;
                var filtersCount = $('.popover .staticFilter').length;
                var activeFilter = 1;
                var serializedTableFilters = [];

                var options = $.extend(true, {
                    attributeSet: true,
                    staticFilters: true,
                    tableFilters: true,
                    paging: true
                }, params);

                // Popover filters
                if(options.staticFilters){

                    $('.popover .staticFilter').each(function() {
                        if ($(this).val() != "") {

                            var filterValue = $(this).find("option:selected").attr('filtervalue');
                            location += "staticFilterId-"+activeFilter+"/" + $(this).val() + "/" + "staticFilterValue-"+activeFilter+"/" + encodeURIComponent(filterValue) + "/";
                            activeFilter++;
                        } else {
                            filtersCount--;
                        }
                    });

                    location += "staticFilters/" + filtersCount + "/";
                }


                // Table filters
                if(options.tableFilters){

                    $('.table .thead select, .table .thead select, .table .thead input, .table .thead input').each(function(){
                        var filterValue = $(this).val(),
                            filterName;

                        if(filterValue != ""){
                            filterName = $(this).attr('name');
                            serializedTableFilters.push(filterName + "=" + encodeURIComponent(filterValue));
                        }
                    });

                    if(serializedTableFilters.length > 0){
                        location += "filter/" + encode_base64(serializedTableFilters.join("&")) + "/";
                    }
                }

                // Current attribute
                if (options.attributeSet && currentAttributeSetId) {
                    location += "attribute_set/" + currentAttributeSetId + "/";
                }

                // Add paging and limit
                if(options.paging){
                    location += "page/" + 1 + "/limit/" + limit + "/";
                }

                return location;
            }

            function loadMoreRows(){

                var currentUrl = window.location.pathname,
                    totalLoaded = $('#grid-left-columns .tbody > div').length,
                    currentLoadCount;

                if(prevRequestCompleted && !filterAjaxFired){

                    page = page + 1;
                    prevRequestCompleted = false;

                    if(page <= totalPages || totalLoaded < totalRecords){

                        // Show loading indicator
                        if((totalRecords - totalLoaded) > limit){
                            currentLoadCount = limit;
                        }
                        else{
                            currentLoadCount = totalRecords - totalLoaded;
                        }

                        if(currentLoadCount <= 0){
                            return;
                        }

                        // Set page on url
                        if(currentUrl.match(/page\/\d+/)){
                            currentUrl = currentUrl.replace(/page\/\d+/, 'page/' + page);
                        }
                        else{
                            currentUrl = stripTrailingSlash(currentUrl) + "/page/" + page;
                        }

                        // Set limit on url
                        if(currentUrl.match(/limit\/\d+/)){
                            currentUrl = currentUrl.replace(/limit\/\d+/, 'limit/' + currentLoadCount);
                        }
                        else{
                            currentUrl = stripTrailingSlash(currentUrl) + "/limit/" + currentLoadCount;
                        }


                        $("#mass-grid-container .actions .loader-indicator").text("Loading next " + currentLoadCount + " records...");

                        $.get( currentUrl + "?uselazyload=true", function( data ) {

                            prevRequestCompleted = true;

                            var $leftColumns = $(data).find('#grid-left-columns .tbody').children();
                            var $bodyColumns = $(data).find('#grid-body .tbody').children();

                            $("#mass-grid #grid-left-columns .tbody").append($leftColumns);
                            $("#mass-grid #grid-body .tbody").append($bodyColumns);

                            //Recalculate total loaded
                            calculateTotalLoaded();

                            //Resize scrollers
                            calculateScrollBars();

                            //Apply uniform
                            $("input[type='checkbox']").uniform();

                            $("#mass-grid-container .actions .loader-indicator").text("");
                        });
                    }
                    else{
                        clearInterval(interval);
                    }
                }
            }

            function stripTrailingSlash(str) {
                if(str.substr(-1) == '/') {
                    return str.substr(0, str.length - 1);
                }
                return str;
            }

            function calculateTotalSelected(){
                var totalSelected = (allRowsSelected) ? totalRecords : $('.grid .table .massaction-checkbox:checked').length;

                $("#zolagocatalog_mass_grid_massaction .items-count").text(totalSelected);
            }

            function calculateViewportHeight(){

                var tableContentH = $('#grid-body .tbody')[0].scrollHeight,
                    viewportH = getAbsHeight($("#grid-body .tbody"));

                if(viewportH < tableContentH){
                    $(".grid .table .tbody").css("height", viewportH + "px");
                }
            }

            function calculateScrollBars(){

                var $scrollbarContainerX = $('#scrollbar-container-x'),
                    $scrollbarContainerY = $('#scrollbar-container-y'),
                    $scrollHandleX = $('#scroll-handle-x'),
                    $scrollHandleY = $('#scroll-handle-y'),
                    tableContentH = $('#grid-body .tbody')[0].scrollHeight,
                    tableContentW = $('#grid-body .tbody')[0].scrollWidth,
                    tableW = $('#grid-body .table').outerWidth(),
                    headerH = $('#grid-body .thead').outerHeight(),
                    leftColumnsW = $('#grid-left-columns').outerWidth(),
                    tableH = $('#grid-body .tbody').outerHeight(),
                    scrollHandleWidth,
                    scrollHandleHeight;

                // Show/Hide scrollbars
                if(tableH < tableContentH){
                    $scrollbarContainerY.show();
                }
                else{
                    $scrollbarContainerY.hide();
                }

                if(tableW < tableContentW){
                    $scrollbarContainerX.show();
                }
                else{
                    $scrollbarContainerX.hide();
                }

                // Position and width of scrollbars
                $scrollbarContainerX.css('width', ($('#mass-grid').outerWidth() - leftColumnsW) + 'px')
                    .css('left', leftColumnsW + 'px');

                $scrollbarContainerY.css('height', ($('#mass-grid').outerHeight() - headerH) + 'px')
                    .css('top', headerH + 'px');

                // Width/Height of scrollbar handles
                scrollHandleWidth = (($('#mass-grid').outerWidth() - leftColumnsW) * $scrollbarContainerX.width()) / tableContentW;
                $scrollHandleX.width(scrollHandleWidth);
                scrollXFactor = (tableContentW)  / $scrollbarContainerX.outerWidth();

                scrollHandleHeight = (($('#mass-grid').outerHeight() - headerH) * $scrollbarContainerY.height()) / tableContentH;
                $scrollHandleY.height(scrollHandleHeight);
                scrollYFactor = (tableContentH)  / $scrollbarContainerY.outerHeight();
            }

            function calculateTotalLoaded(){
                var totalLoaded = (totalRecords > 0) ? $('#grid-left-columns .tbody > div').length : 0,
                    percentLoaded = (totalRecords > 0) ? Math.round((totalLoaded/totalRecords) * 100) : 0;

                $("#mass-grid-container .actions .loaded-records-count").text(totalLoaded);
                $("#mass-grid-container .actions .percent-loaded").text("(" + percentLoaded + "%)");
            }

            function calculateLeftColumnWidth(){

                var $columns = $('#grid-left-columns .headings > div'),
                    totalW = 0;

                $columns.each(function(){
                    totalW += $(this).outerWidth();
                });

                $("#grid-left-columns").width(totalW);
                $("#grid-body").css("margin-left", totalW + "px");

            }

            function calculateTableWidth(){

                var $lastColumn = $("#grid-body .thead .headings > div:last-of-type"),
                    $container = $lastColumn.closest("#grid-body"),
                    containerOffsetL = $container.offset().left,
                    offsetL = $lastColumn.offset().left,
                    w = $lastColumn.outerWidth(),
                    boxW = offsetL + w - containerOffsetL;

                $("#grid-body .thead").width(boxW);
                $("#grid-body .tbody").width(boxW);

            }

            function calculateTablePageHeight(){

                var offset = 10;

                tablePageHeight = $("#grid-body .tbody").outerHeight() - offset;
            }

            function setPopoverWidth($popover){
                var $button = $("#filter-btn"),
                    buttonOffsetLeft = $button.offset().left,
                    $sidebar = $('#sidebar'),
                    sidebarWidth = $sidebar.outerWidth(),
                    offset = 20,
                    popoverWidth = buttonOffsetLeft - sidebarWidth - offset;

                $popover.on("show.bs.popover", function(e){
                    $popover.data()["bs.popover"].$tip.css("max-width", popoverWidth + "px").css("width", popoverWidth + "px");
                });
            }
        });

    </script>
<?php endif; ?>

<script type="application/javascript">

    jQuery(function($){

        $("body").on('change', '#attribute_set_switcher', function(){

            reloadWithAttributeSet($(this).val());

        });

    });


    function reloadWithAttributeSet(attributeSetId){

        var location;

        if(!attributeSetId) attributeSetId = currentAttributeSetId;

        if (attributeSetId) {
            location = cleanLocation + "attribute_set/" + attributeSetId + "/limit/" + limit + "/";
        }

//        $("#grid-loader").show();

        window.location.href = location;

    }
</script>
