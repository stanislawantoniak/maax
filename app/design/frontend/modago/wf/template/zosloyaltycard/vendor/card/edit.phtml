<?php
/** @var $this ZolagoOs_LoyaltyCard_Block_Vendor_Card_Edit */
/** @var ZolagoOs_LoyaltyCard_Model_Card $card */
$card = $this->getModel();
/** @var ZolagoOs_LoyaltyCard_Helper_Data $helper */
$helper = Mage::helper("zosloyaltycard");

/**
 * Why this here?
 * Each vendor have his own skin and different business requirement for this form
 * (so now we don't need to override object block)
 *
 * @param $object ZolagoOs_LoyaltyCard_Block_Vendor_Card_Edit
 * @return Zolago_Dropship_Model_Form
 */
function _prepareForm($object) {
	/** @var ZolagoOs_LoyaltyCard_Helper_Data $helper */
	$helper = Mage::helper("zosloyaltycard");

	/** @var Zolago_Dropship_Model_Form $form */
	$form = Mage::getModel('zolagodropship/form');

	// +10 years by default
	if(!$object->getModel()->hasData('expire_date')) {
		$object->getModel()->setData('expire_date', date("Y-m-d H:i:s", time() + 60*60*24*365*10));
	}
	$values = $object->getModel()->getData();

	$general = $form->addFieldset("general", array(
		"legend" => $helper->__("Card data"),
		"icon_class" => "icon-double-angle-right"
	));

	$general->addField("card_number", "text", array(
		"name" => "card_number",
		"class" => "form-control",
		"required" => true,
		"label" => $helper->__('Card number'),
		"label_wrapper_class" => "col-md-3",
		"wrapper_class" => "col-md-3"
	));

	$general->addField("receipt_number", "text", array(
		"name" => "receipt_number",
		"class" => "form-control",
		"required" => false,
		"label" => $helper->__('Receipt number'),
		"label_wrapper_class" => "col-md-3",
		"wrapper_class" => "col-md-3"
	));

	$general->addField("receipt_value", "text", array(
		"name" => "receipt_value",
		"class" => "form-control",
		"required" => false,
		"label" => $helper->__('Receipt value'),
		"label_wrapper_class" => "col-md-3",
		"wrapper_class" => "col-md-2"
	));

	$general->addField("shop_code", "text", array(
		"name" => "shop_code",
		"class" => "form-control",
		"required" => false,
		"label" => $helper->__('Shop code'),
		"label_wrapper_class" => "col-md-3",
		"wrapper_class" => "col-md-2"
	));

	$general->addField("card_type", "select", array(
		"name" => "card_type",
		"class" => "form-control",
		"required" => true,
		"label" => $helper->__('Card type'),
		"label_wrapper_class" => "col-md-3",
		"wrapper_class" => "col-md-3",
		'values' => Mage::getSingleton("zolagocustomer/source_loyalty_card_types")->getAllOptions(),
	));

	$general->addField("expire_date", "text", array(
		"name" => "expire_date",
		"class" => "form-control datetimepicker col-md-2",
		"required" => true,
		"label" => $helper->__('Expire date'),
		"label_wrapper_class" => "col-md-3",
		"wrapper_class" => "col-md-3 datetimepicker-wrapper",
		"after_element_html" => '<label style="margin: 8px;"><i class="icon-calendar"></i></label>',
	));

	$isNew = $object->isModelNew();
	if (!$isNew) {
		$general->addField('created_at', 'date', array(
			"name" => 'created_at',
			"class" => "form-control col-md-2",
			"required" => false,
			"label" => $helper->__("Created at"),
			"label_wrapper_class" => "col-md-3",
			"wrapper_class" => "col-md-3",
			"readonly" => true,
			"format" => "Y-MM-d HH:mm:ss",
			'is_wide' => true,
			"style" => "width:150px;",
		));

		$general->addField('updated_at', 'date', array(
			"name" => 'updated_at',
			"class" => "form-control col-md-2",
			"required" => false,
			"label" => $helper->__("Updated at"),
			"label_wrapper_class" => "col-md-3",
			"wrapper_class" => "col-md-3",
			"readonly" => true,
			"format" => "Y-MM-d HH:mm:ss",
			'is_wide' => true,
			"style" => "width:150px;",
		));
	}

	$client = $form->addFieldset("client", array(
		"legend" => $helper->__("Client data"),
		"icon_class" => "icon-double-angle-right"
	));

	$client->addField("first_name", "text", array(
		"name" => "first_name",
		"class" => "form-control",
		"required" => true,
		"label" => $helper->__('First name'),
		"label_wrapper_class" => "col-md-3",
		"wrapper_class" => "col-md-4"
	));

	$client->addField("surname", "text", array(
		"name" => "surname",
		"class" => "form-control",
		"required" => true,
		"label" => $helper->__('Surname'),
		"label_wrapper_class" => "col-md-3",
		"wrapper_class" => "col-md-4"
	));

	$client->addField("sex", "radios", array(
		"name" => "sex",
		//"class" => "form-control",
		"required" => true,
		"label" => $helper->__('Sex'),
		"label_wrapper_class" => "col-md-3",
		"wrapper_class" => "col-md-3 radio-buttons",
		'value' => 'M',
		'values' => array(
			array('value' => 'M', 'label' => $helper->__('Male')),
			array('value' => 'F', 'label' => $helper->__('Female')),
		),
	));

	$client->addField("telephone_number", "text", array(
		"name" => "telephone_number",
		"class" => "form-control group-email-or-phone",
		"required" => true,
		"label" => $helper->__('Telephone number'),
		"label_wrapper_class" => "col-md-3",
		"wrapper_class" => "col-md-3"
	));

	$client->addField("email", "text", array(
		"name" => "email",
		"class" => "form-control group-email-or-phone",
		"required" => true,
		"label" => $helper->__('Email'),
		"label_wrapper_class" => "col-md-3",
		"wrapper_class" => "col-md-3"
	));

	$abode  = $form->addFieldset("abode", array(
		"legend" => $helper->__("Abode"),
		"icon_class" => "icon-double-angle-right"
	));

	$abode->addField("place", "text", array(
		"name" => "place",
		"class" => "form-control",
		"required" => false,
		"label" => $helper->__('Place'),
		"label_wrapper_class" => "col-md-3",
		"wrapper_class" => "col-md-5"
	));

	$abode->addField("zip_code", "text", array(
		"name" => "zip_code",
		"class" => "form-control",
		"required" => true,
		"label" => $helper->__('Zip code'),
		"label_wrapper_class" => "col-md-3",
		"wrapper_class" => "col-md-2"
	));

	$count = isset($values['kids']) && count($values['kids']) ? count($values['kids']) : 1;
	/**
	 * kid #0 is a 'template' kid for copy all fields in fieldset after
	 * operator click in 'Add kid' btn
	 */
	for ($i = 0; $i <= $count; $i++) {

		$kids = $form->addFieldset("kid_{$i}", array(
			"legend" => $helper->__("Kid data"),
			"icon_class" => "icon-double-angle-right",
			"class" => "kid" . ($i == 0 ? " hidden" : "")
		));

		$kids->addField("kids_{$i}_first_name", "text", array(
			"name" => "kids[{$i}][first_name]",
			"class" => "form-control",
			"required" => $i != 0,
			"label" => $helper->__('First name'),
			"label_wrapper_class" => "col-md-3 label-wrapper",
			"wrapper_class" => "col-md-4"
		));


		$kids->addField("kids_{$i}_sex", "radios", array(
			"name" => "kids[{$i}][sex]",
			//"class" => "form-control",
			"required" => $i != 0,
			"label" => $helper->__('Sex'),
			"label_wrapper_class" => "col-md-3 label-wrapper",
			"wrapper_class" => "col-md-3 radio-buttons",
			'value' => 'M',
			'values' => array(
				array('value' => 'M', 'label' => $helper->__('Boy')),
				array('value' => 'F', 'label' => $helper->__('Girl')),
			),
		));

		$kids->addField("kids_{$i}_birthdate", "text", array(
			"name" => "kids[{$i}][birthdate]",
			"class" => "form-control datetimepicker datetimepicker-kid-{$i} col-md-2",
			"required" => $i != 0,
			"label" => $helper->__('Date of birth'),
			"label_wrapper_class" => "col-md-3 label-wrapper",
			"wrapper_class" => "col-md-3 datetimepicker-wrapper datetimepicker-wrapper-kid-{$i}",
			"after_element_html" => '<label style="margin: 8px;"><i class="icon-calendar"></i></label>',
		));

	}

	$kids = $form->addFieldset("kid_{$i}", array(
		"legend" => $helper->__("Kid data"),
		"icon_class" => "icon-double-angle-right",
		"class" => "kid kid-with-add-btn"
	));

	$kids->addField('kids_add', 'label', array(
		"class" => "form-control",
		"label_wrapper_class" => "col-md-3",
		"label" => $helper->__('Add another child'),
		"wrapper_class" => "col-md-7",
		"after_element_html" => '<div class="add-kid-wrapper"><a class="btn btn-primary add-kid-btn">'. $helper->__("Add kid") . '</a></div>',
	));

	$form->setValues($values);
	return $form;
}
$form = _prepareForm($this);

$values = $this->getModel()->getData();
$count  = 1 + (isset($values['kids']) && count($values['kids']) ? count($values['kids']) : 1);
?>

<div class="container">
	<div class="page-heading row">
		<div class="col-lg-6">
			<?php if ($this->isModelNew()): ?>
				<h3><?php echo $helper->__("New card"); ?></h3>
				<p><?php echo $helper->__("Create new card. Required fields are marked with an asterisk."); ?></p>
			<?php else: ?>
				<h3><?php echo $helper->__("Edit card '%s'", $card->getCardCode()); ?></h3>
				<p><?php echo $helper->__("Below you will find details of card. You can make changes to this cart by editing each field."); ?></p>
			<?php endif; ?>
		</div>
		<div class="col-md-6">
			<?php if (!$this->isModelNew()): ?>
				<a class="btn btn-danger pull-right" style="margin: 30px 5px 0 0;" data-toggle="modal" data-target="#confirm-delete">
					<i class="icon-remove"></i>&nbsp;<?php echo $helper->__("Remove card"); ?></a>
			<?php endif; ?>
		</div>
	</div>
</div>

<div class="container z-grid">
	<form id="edit-card" class="form-horizontal row-border" action="<?php echo $this->getSaveUrlAction(); ?>" method="POST">
		<input type="hidden" name="id" value="<?php echo $card->getId();?>"/>
		<?php echo $this->getLayout()->getBlock('formkey')->toHtml();?>
		<?php echo $form->toHtml(); ?>

		<div class="form-actions">
			<div class="row">
				<div class="col-xs-12">
					<input type="submit" value="<?php echo $helper->__("Save");?>" class="btn btn-primary pull-right">
					<a href="<?php echo Mage::getUrl('*/*'); ?>" class="btn btn-default pull-right"><?php echo $helper->__("Cancel");?></a>
				</div>
			</div>
		</div>
	</form>
</div>

<div class="modal fade" id="confirm-delete" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true">
	<div class="modal-dialog">
		<div class="modal-content">
			<div class="modal-header">
				<a href="#" data-dismiss="modal" aria-hidden="true" class="close">Ã—</a>
				<h3><?php echo $helper->__("Are you sure?"); ?></h3>
			</div>
			<div class="modal-body">
				<p><?php echo $helper->__("Do you want to delete card?"); ?></p>
			</div>
			<div class="modal-footer">
				<form id="delete-card" class="form-horizontal row-border" action="<?php echo $this->getDeleteUrlAction(); ?>" method="POST">
					<input type="hidden" name="id" value="<?php echo $card->getId();?>"/>
					<input type="hidden" name="delete_type" value="" id="delete-type-input"/>
					<?php echo $this->getLayout()->getBlock('formkey')->toHtml();?>
					<button type="button" class="btn btn-default pull-left" data-dismiss="modal"><?php echo $helper->__("Cancel"); ?></button>
					<input id="delete-btn-only-card" data-delete-type="<?php echo ZolagoOs_LoyaltyCard_Model_Card::DELETE_ONLY_CARD;?>" type="submit" value="<?php echo $helper->__("Delete just card"); ?>" class="btn btn-danger danger pull-right delete-btn">
					<input id="delete-btn-with-subscription" data-delete-type="<?php echo ZolagoOs_LoyaltyCard_Model_Card::DELETE_WITH_SUBSCRIPTION;?>" type="submit" value="<?php echo $helper->__("Delete card and subscription"); ?>" class="btn btn-danger danger pull-right delete-btn">
				</form>
			</div>
		</div>
	</div>
</div>

<script>
	var CardEdit = {
		kidCount: <?php echo $count; ?>,
		kidsData: <?php echo json_encode(isset($values['kids']) ? $values['kids'] : array()); ?>,
		dateFormat: 'Y-m-d H:i:s',
		
		init: function () {
			this.populateKidsData();
			this.initDatetimepicker();
			this.initKids();
			this.initDelete();
			this.initValidation();
			this.initViewLogic();
		},
		initDatetimepicker: function () {
			jQuery('.datetimepicker').datetimepicker({
				lang: _currentLocale == "pl_PL" ? 'pl' : 'en',
				format: CardEdit.dateFormat,
			});
			jQuery(document).delegate(".icon-calendar", "click", function () {
				jQuery(this).parents(".datetimepicker-wrapper").find(".datetimepicker")
					.datetimepicker("show")
					.blur();
			});
		},
		initKids: function () {
			jQuery(document).delegate(".add-kid-btn",
				"click",
				function (e) {
					e.preventDefault();
					CardEdit.addKidWithAddBtn();
					CardEdit.addNewKidFieldset(jQuery(this).parents('.widget-content'));
				});
		},
		initDelete: function () {
			jQuery(".delete-btn").click(function (e) {
				var type = jQuery(this).attr("data-delete-type");
				jQuery("#delete-type-input").val(type);
				jQuery('.delete-btn').attr("disabled", true);
				jQuery(this).parent('form').submit();
			})
		},
		initValidation: function() {
			/**
			 * @see require_from_group
			 */
			jQuery.validator.addMethod("require_from_group_2", function(value, element, options) {
				var validator = this;
				var selector = options[1];
				var validOrNot = jQuery(selector, element.form).filter(function() {
						return validator.elementValue(this);
					}).length >= options[0];
				
				return validOrNot;
			}, "Please fill at least {0} of these fields.");

			var form = jQuery("#edit-card");
			new Zolago.formIntegrator(form);
			form.validate({
				rules: {
					"telephone_number": {
						require_from_group_2: [1, ".group-email-or-phone"],
						required: false
					},
					"email": {
						require_from_group_2: [1, ".group-email-or-phone"],
						required: false
					}
				},
				messages: {
					telephone_number: {
						require_from_group_2: '<?php echo Mage::helper('zolagocommon')->__("Please fill at least {0} of these fields."); ?>'
					},
					email: {
						require_from_group_2: '<?php echo Mage::helper('zolagocommon')->__("Please fill at least {0} of these fields."); ?>'
					}
				},
				errorPlacement: function($error, $element) {
					if ($element.closest("div").hasClass("input-group")) {
						$element.closest("div").parent().append($error);
					} else {
						$element.closest("div").append($error);
					}
				}
			});
		},
		initViewLogic: function () {
			if (jQuery('#card_type option').length == 2) {
				jQuery('#card_type').val(jQuery('#card_type option:eq(1)').val());
			}
		},
		populateKidsData: function () {
			for (var key in this.kidsData) {
				var obj = this.kidsData[key];
				jQuery("#kids_"+key+"_first_name").val(obj['first_name']);
				jQuery("#kids_"+key+"_birthdate").val(obj['birthdate']);
				if (obj['sex'] == 'M') {
					jQuery("#kids_"+key+"_sexM").val(obj['sex']).prop('checked', true).attr('checked','checked');
				} else {
					jQuery("#kids_"+key+"_sexF").val(obj['sex']).prop('checked', true).attr('checked','checked');
				}
			}
		},
		addNewKidFieldset: function(where) {
			var html = this.getKidFieldsetTemplate().find('.widget-content').html();
			html = html.replace(/_0_/g, '_'+CardEdit.kidCount+'_');
			html = html.replace(/\[0\]/g, '['+CardEdit.kidCount+']');
			html = html.replace(/kid\-0/g, 'kid-'+CardEdit.kidCount);
			where.html(html).hide().show('slow');
			jQuery('#kids_'+CardEdit.kidCount+'_birthdate').datetimepicker({
				lang: _currentLocale == "pl_PL" ? 'pl' : 'en',
				format: CardEdit.dateFormat,
			});
			CardEdit.kidCount++;
		},
		getKidFieldsetTemplate: function () {
			return jQuery(".kid:eq(0)");
		},
		addKidWithAddBtn: function() {
			var html = jQuery('.kid-with-add-btn').html();
			jQuery('.kid-with-add-btn').removeClass('kid-with-add-btn');
			jQuery("form .widget:last").after('<div class="widget box kid kid-with-add-btn">'+html+'</div>').hide().show('slow');
		},
	};

	jQuery(document).ready(function () {
		CardEdit.init();
	});
</script>